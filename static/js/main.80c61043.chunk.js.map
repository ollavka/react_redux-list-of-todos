{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","utils/getFilteredTodos.ts","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","All","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodo","dispatch","length","className","map","id","completed","classNames","title","onClick","selectTodoActions","onSelectTodo","TodoFilter","onQueryChange","FilterActions","value","onChange","event","target","changeFilterStatus","Active","Completed","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","useEffect","userId","data","catch","err","Error","href","email","name","App","TodosActions","filteredTodos","useMemo","option","todosStatus","lowerQuery","toLocaleLowerCase","toLowerCase","includes","getFilteredTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80c61043.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types';\n\ntype RemoveTodoAction = {\n  type: 'currentTodo/REMOVE'\n};\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return { ...action.payload };\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types';\n\ntype ChangeQueryAction = {\n  type: 'filter/SET_QUERY',\n  payload: string;\n};\n\ntype ChangeStatusAction = {\n  type: 'filter/SET_STATUS',\n  payload: Status;\n};\n\ntype Action = ChangeQueryAction | ChangeStatusAction;\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst changeQuery = (query: string): ChangeQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst changeStatus = (status: Status): ChangeStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { changeQuery, changeStatus };\n\nconst filterReducer = (\n  state: State = { query: '', status: Status.All },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo, User } from './types';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { actions as selectTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const onSelectTodo = (todo: Todo) => {\n    dispatch(selectTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {todos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map((todo) => (\n              <tr key={todo.id} data-cy=\"todo\">\n                <td className=\"is-vcentered\">{todo.id}</td>\n\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames({\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => onSelectTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('far', {\n                        'fa-eye': todo.id !== selectedTodo?.id,\n                        'fa-eye-slash': todo.id === selectedTodo?.id,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { FC, ChangeEvent } from 'react';\nimport { Status } from '../../types';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as FilterActions } from '../../features/filter';\n\nexport const TodoFilter: FC = () => {\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const changeFilterStatus = (event: ChangeEvent<HTMLSelectElement>) => {\n    dispatch(FilterActions.changeStatus(event.target.value as Status));\n  };\n\n  const onQueryChange = (query: string) => {\n    dispatch(FilterActions.changeQuery(query));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter.status}\n            onChange={(event) => changeFilterStatus(event)}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {filter.query && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo, User } from '../../types';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as selectTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  selectedTodo: Todo;\n};\n\nexport const TodoModal: FC<Props> = ({ selectedTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(data => setUser(data))\n      .catch(err => {\n        throw new Error(err);\n      });\n  }, []);\n\n  const onModalClose = () => {\n    dispatch(selectTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { FC, useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getFilteredTodos } from './utils/getFilteredTodos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as TodosActions } from './features/todos';\nimport './App.scss';\n\nexport const App: FC = () => {\n  const { todos, currentTodo, filter } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getTodos()\n      .then(data => dispatch(TodosActions.setTodos(data)))\n      .catch(err => {\n        throw new Error(err);\n      });\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    return getFilteredTodos(todos, {\n      todosStatus: filter.status,\n      query: filter.query,\n    });\n  }, [todos, filter.status, filter.query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0 ? (\n                <Loader />\n              ) : (\n                <TodoList todos={filteredTodos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal selectedTodo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import { Todo, Status } from '../types';\n\ntype FilterOptions = {\n  query: string;\n  todosStatus: Status;\n};\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  option: FilterOptions,\n) => {\n  const {\n    todosStatus,\n    query,\n  } = option;\n\n  let filteredTodos = [...todos];\n\n  if (todosStatus !== Status.All) {\n    filteredTodos = filteredTodos.filter(todo => {\n      switch (todosStatus) {\n        case Status.Active:\n          return !todo.completed;\n\n        case Status.Completed:\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    });\n  }\n\n  if (query) {\n    filteredTodos = filteredTodos.filter(todo => {\n      const { title } = todo;\n      const lowerQuery = query.toLocaleLowerCase();\n\n      return title.toLowerCase().includes(lowerQuery);\n    });\n  }\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}