{"version":3,"sources":["types/Status.ts","features/currentTodo/currentTodo.ts","features/filter/filter.ts","features/todos/todos.ts","app/store.ts","api.ts","app/hooks.ts","features/currentTodo/selectors.ts","components/TableRow/TableRow.tsx","components/TodosTable/TodosTable.tsx","components/TodoList/TodoList.tsx","features/filter/selectors.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","features/selectors.ts","App.tsx","utils/getFilteredTodos.ts","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","All","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","useAppDispatch","useDispatch","useAppSelector","useSelector","selectCurrentTodo","TableRow","selectedTodo","dispatch","className","id","completed","cn","title","onClick","selectTodoActions","onSelectTodo","TodosTable","map","TodoList","length","selectFilter","TodoFilter","onQueryChange","filterActions","value","onChange","event","target","Active","Completed","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","useEffect","userId","data","catch","err","Error","href","email","name","selectFullState","App","fetchTodos","a","todosActions","message","filteredTodos","useMemo","option","todosStatus","lowerQuery","toLocaleLowerCase","toLowerCase","includes","getFilteredTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a47f173.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../../types';\n\ntype RemoveTodoAction = {\n  type: 'currentTodo/REMOVE'\n};\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return { ...action.payload };\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../../types';\n\ntype ChangeQueryAction = {\n  type: 'filter/SET_QUERY',\n  payload: string;\n};\n\ntype ChangeStatusAction = {\n  type: 'filter/SET_STATUS',\n  payload: Status;\n};\n\ntype Action = ChangeQueryAction | ChangeStatusAction;\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst changeQuery = (query: string): ChangeQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst changeStatus = (status: Status): ChangeStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { changeQuery, changeStatus };\n\nconst filterReducer = (\n  state: State = { query: '', status: Status.All },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../../types';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo/currentTodo';\nimport filterReducer from '../features/filter/filter';\nimport todosReducer from '../features/todos/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo, User } from './types';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RootState } from '../../app/store';\n\nexport const selectCurrentTodo = (state: RootState) => state.currentTodo;\n","/* eslint-disable @typescript-eslint/no-shadow */\nimport { FC } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { selectCurrentTodo } from '../../features/currentTodo/selectors';\nimport {\n  actions as selectTodoActions,\n} from '../../features/currentTodo/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TableRow: FC<Props> = ({ todo }) => {\n  const selectedTodo = useAppSelector(selectCurrentTodo);\n  const dispatch = useAppDispatch();\n\n  const onSelectTodo = (todo: Todo) => {\n    dispatch(selectTodoActions.setTodo(todo));\n  };\n\n  return (\n    <tr key={todo.id} data-cy=\"todo\">\n      <td className=\"is-vcentered\">{todo.id}</td>\n\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={cn({\n            'has-text-danger': !todo.completed,\n            'has-text-success': todo.completed,\n          })}\n        >\n          {todo.title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelectTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i\n              className={cn('far', {\n                'fa-eye': todo.id !== selectedTodo?.id,\n                'fa-eye-slash': todo.id === selectedTodo?.id,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport { Todo } from '../../types';\nimport { TableRow } from '../TableRow';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodosTable: FC<Props> = ({ todos }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => (\n        <TableRow key={todo.id} todo={todo} />\n      ))}\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodosTable } from '../TodosTable';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <>\n    {!todos.length ? (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    ) : (\n      <TodosTable todos={todos} />\n    )}\n  </>\n);\n","import { RootState } from '../../app/store';\n\nexport const selectFilter = (state: RootState) => state.filter;\n","import { FC, ChangeEvent } from 'react';\nimport { Status } from '../../types';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter/filter';\nimport { selectFilter } from '../../features/filter/selectors';\n\nexport const TodoFilter: FC = () => {\n  const filter = useAppSelector(selectFilter);\n  const dispatch = useAppDispatch();\n\n  const changeFilterStatus = (event: ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.changeStatus(event.target.value as Status));\n  };\n\n  const onQueryChange = (query: string) => {\n    dispatch(filterActions.changeQuery(query));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter.status}\n            onChange={changeFilterStatus}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {filter.query && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo, User } from '../../types';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport {\n  actions as selectTodoActions,\n} from '../../features/currentTodo/currentTodo';\n\ntype Props = {\n  selectedTodo: Todo;\n};\n\nexport const TodoModal: FC<Props> = ({ selectedTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(data => setUser(data))\n      .catch(err => {\n        throw new Error(err);\n      });\n  }, []);\n\n  const onModalClose = () => {\n    dispatch(selectTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { RootState } from '../app/store';\n\nexport const selectFullState = (state: RootState) => state;\n","/* eslint-disable max-len */\nimport { FC, useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getFilteredTodos } from './utils/getFilteredTodos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos/todos';\nimport { selectFullState } from './features/selectors';\nimport './App.scss';\n\nexport const App: FC = () => {\n  const { todos, currentTodo, filter } = useAppSelector(selectFullState);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const data = await getTodos();\n\n        dispatch(todosActions.setTodos(data));\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new Error(error.message);\n        }\n\n        throw new Error('Unknown error occurred.');\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const filteredTodos = useMemo(() => (\n    getFilteredTodos(todos, {\n      todosStatus: filter.status,\n      query: filter.query,\n    })\n  ), [todos, filter.status, filter.query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length ? (\n                <Loader />\n              ) : (\n                <TodoList todos={filteredTodos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal selectedTodo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import { Todo, Status } from '../types';\n\ntype FilterOptions = {\n  query: string;\n  todosStatus: Status;\n};\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  option: FilterOptions,\n) => {\n  const {\n    todosStatus,\n    query,\n  } = option;\n\n  let filteredTodos = todos;\n\n  if (todosStatus !== Status.All) {\n    filteredTodos = filteredTodos.filter(todo => {\n      switch (todosStatus) {\n        case Status.Active:\n          return !todo.completed;\n\n        case Status.Completed:\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    });\n  }\n\n  if (query) {\n    filteredTodos = filteredTodos.filter(todo => {\n      const { title } = todo;\n      const lowerQuery = query.toLocaleLowerCase();\n\n      return title.toLowerCase().includes(lowerQuery);\n    });\n  }\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}